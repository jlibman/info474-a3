scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 5, opacity = 0.5, symbol = 'circle', color = 'blue')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 5, opacity = 0.5, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
colorscale = 'Viridius'
showscale = TRUE
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'balbers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
colorscale = 'Viridius'
showscale = TRUE
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 5, opacity = carat, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = carat, opacity = carat, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 4, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 25, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = ""),
size = 4, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
summary1 <- data %>% select(city, state, injured, killed, total_affected) %>%
filter(group_by(city)) %>%
arrange(desc(total_affected))
summary1 <- data %>% select(city, state, injured, killed, total_affected) %>%
group_by(city) %>%
arrange(desc(total_affected))
names(summary1)[names(summary1)=="sum_injured"] <- "Total Injury"
names(summary1)[names(summary1)=="sum_killed"] <- "Total Casualty"
names(summary1)[names(summary1)=="sum_total"] <- "Total Injury and Casualty"
summary1
names(summary)[names(summary)=="sum_injured"] <- "Total Injury"
summary
names(summary1)[names(summary1)=="sum_injured"] <- "Total Injury"
summary1
summary1 <- data %>% select(city, state, injured, killed, total_affected) %>%
group_by(city) %>%
arrange(desc(total_affected))
names(summary1)[names(summary1)=="sum_injured"] <- "Total Injury"
names(summary1)[names(summary1)=="sum_total"] <- "Total Injury and Casualty"
names(summary1)[names(summary1)=="sum_killed"] <- "Total Casualty"
names(summary1)[names(summary1)=="sum_total"] <- "Total Injury and Casualty"
summary1
summary1 <- data %>% select(city, state, injured, killed, total_affected) %>%
group_by(city) %>%
summarise(
sum_injured = sum(injured, na.rm = TRUE),
sum_killed = sum(killed, na.rm = TRUE),
sum_total = sum_injured + sum_killed) %>%
arrange(desc(sum_total))
names(summary1)[names(summary1)=="sum_injured"] <- "Total Injury"
names(summary1)[names(summary1)=="sum_killed"] <- "Total Casualty"
names(summary1)[names(summary1)=="sum_total"] <- "Total Injury and Casualty"
summary1
kable(summary1)
m <- list(colorbar = list(title = "abc"),
size = 4, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
colorscale = `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = "abc"),
size = 4, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
colorscale = `[[0, 'rgb(0,200,255)', [1, 'rgb(255,0,0)']]`
)
plot_ly(data,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
m <- list(colorbar = list(title = "Number of Occurances"),
size = 4, opacity = 0.4, symbol = 'circle')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
countrywidth = 1,
subunitwidth = 1,
)
plot_ly(summary1,
lat = lat,
lon = lng,
text = hover,
color = 'blue',
type = 'scattergeo',
locationmode = 'USA-states',
mode = 'markers',
marker = m) %>%
layout(title = '2015 Mass Shootings in America', geo = g)
names(summary1)[names(summary1)=="city"] <- "City"
View(data)
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
View(data)
data <- iris
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
library(rsconnect)
rsconnect::deployApp('/Users/jessicalibman/Desktop/Info 498/a8-building-applications')
library(rsconnect)
rsconnect::deployApp('/Users/jessicalibman/Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/a8-building-applications')
shiny::runApp('Desktop/Info 498/Final Project/final_project')
shiny::runApp('Desktop/Info 498/Final Project/final_project')
shiny::runApp('Desktop/Info 498/Final Project/final_project')
shiny::runApp('Desktop/Info 498/Final Project/final_project')
shiny::runApp('Desktop/Info 498/Final Project/final_project')
shiny::runApp('Desktop/Past Classes/Info 498/Final Project/final_project')
county_level_binge
county_level_binge
mutate(average = (females_2012 + males_2012) / 2)
# Exercise-4
source(./data-prep.r)
View(all.data)
all.data <- all.data %>% mutate(pct.voted = total.voted/registered.voters)
# Start by making a new `ggplot` with `all.data` as the data (no geometry yet)
# Exercise-4
# Set up: load `dplyr` and `ggplot2`
library(dplyr)
library(ggplot2)
# Read, and then `source` the data-prep.R file. The `all.data` variable is now available
source('./data-prep.R')
# Create a column of percentage of registered voters who voted
View(all.data)
all.data <- all.data %>% mutate(pct.voted = total.voted/registered.voters)
# Start by making a new `ggplot` with `all.data` as the data (no geometry yet)
# What do you see?
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `registerd.voters` mapped to the y-position.
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `pct.voted` mapped to the y-position.
# Color the points as "blue"
# Create the same scatter plot as above, but put the county names where the dots are
# Draw a scatter plot comparing the female percentage to the percent voted
# Size the points by the population of the county
# Draw a line graph comparing the total population to the percent male
# Make it a green line
# Exercise-4
# Set up: load `dplyr` and `ggplot2`
library(dplyr)
library(ggplot2)
# Read, and then `source` the data-prep.R file. The `all.data` variable is now available
source('./data-prep.R')
# Create a column of percentage of registered voters who voted
View(all.data)
all.data <- all.data %>% mutate(pct.voted = total.voted/registered.voters)
hist(all.data$pct.voted)
# Start by making a new `ggplot` with `all.data` as the data (no geometry yet)
# What do you see?
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `registerd.voters` mapped to the y-position.
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `pct.voted` mapped to the y-position.
# Color the points as "blue"
# Create the same scatter plot as above, but put the county names where the dots are
# Draw a scatter plot comparing the female percentage to the percent voted
# Size the points by the population of the county
# Draw a line graph comparing the total population to the percent male
# Make it a green line
source('./data-prep.R')
# Create a column of percentage of registered voters who voted
# Exercise-4
# Set up: load `dplyr` and `ggplot2`
library(dplyr)
library(ggplot2)
# Read, and then `source` the data-prep.R file. The `all.data` variable is now available
source('./data-prep.R')
# Create a column of percentage of registered voters who voted
View(all.data)
all.data <- all.data %>% mutate(pct.voted = total.voted/registered.voters)
hist(all.data$pct.voted)
# Start by making a new `ggplot` with `all.data` as the data (no geometry yet)
# What do you see?
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `registerd.voters` mapped to the y-position.
# Draw a scatter plot (with point geometry) with for the `all.data` set,
# with the `total.population` mapped to the x-position and `pct.voted` mapped to the y-position.
# Color the points as "blue"
# Create the same scatter plot as above, but put the county names where the dots are
# Draw a scatter plot comparing the female percentage to the percent voted
# Size the points by the population of the county
# Draw a line graph comparing the total population to the percent male
# Make it a green line
ggplot(data=all.data) + geom_point()
# Set up: load `dplyr` and `ggplot2`
library(dplyr)
library(ggplot2)
pwd
setwd("~/Desktop/INFO474/assignment3/info474-a3")
raw.data <- read.csv('seattleWeather_1948-2017.csv', stringsAsFactors = FALSE)
View(raw.data)
data <- as.data.frame(raw.data)
print(substr(data[1], 1,4))
x <- substr(data[1], 1,4)
x
x <- substr(data[1], 1,9)
x
x <- substr(data[1], 4,8)
x
x <- substr(data[1], 4,7)
x
data['year'] <- substr(data[1], 4,7)
View(data)
x
x <- substr(data[1], 8,10)
x
x <- substr(data[1], 9,10)
x
data['month'] <- substr(data[1], 9,10)
x <- substr(data[1], 11,12)
x
x <- substr(data[1], 12,13)
x
data['day'] <- substr(data[1], 12,13)
data['year'] <- sapply(substr(data[1], 4,7))
data['year'] <- sapply(substr(data['DATE'], 4,7))
data['year'] <- (substr(data['DATE'], 4,7)
data['year'] <- substr(data['DATE'], 4,7
data['year'] <- substr(data['DATE'], 4,7
data['year'] <- substr(data['DATE'], 4,7)
data$year <- substr(data[1], 4,7)
data$year <- substr(data[1], 4,7)
data$year <- substr(data$DATE, 4,7)
data$year <- substr(data$DATE, 1,4)
data$year <- substr(data$DATE, 1,4)
data$month <- substr(data$DATE, 5,6)
data$month <- substr(data$DATE, 6,7)
data$day <- substr(data$DATE, 9,10)
write.csv(data, file = "data.csv")
data <- na.omit(data)
data <- as.data.frame(raw.data)
omit.NA.data <- na.omit(raw.data)
# Read in data
raw.data <- read.csv('seattleWeather_1948-2017.csv', stringsAsFactors = FALSE)
data <- as.data.frame(raw.data)
# Clean dataset by breaking down date in to year, month, and day
data$year <- substr(data$DATE, 1,4)
data$month <- substr(data$DATE, 6,7)
data$day <- substr(data$DATE, 9,10)
# Export dataset as csv
write.csv(data, file = "data.csv")
omit.NA.data <- na.omit(raw.data)
# Export dataset as csv
write.csv(omit.NA.data, file = "data.csv")
# Read in data
raw.data <- read.csv('seattleWeather_1948-2017.csv', stringsAsFactors = FALSE)
data <- as.data.frame(raw.data)
# Clean dataset by breaking down date in to year, month, and day
data$year <- substr(data$DATE, 1,4)
data$month <- substr(data$DATE, 6,7)
data$day <- substr(data$DATE, 9,10)
# Remove rows with NA data
omit.NA.data <- na.omit(raw.data)
# Export dataset as csv
write.csv(omit.NA.data, file = "data.csv")
# Read in data
raw.data <- read.csv('seattleWeather_1948-2017.csv', stringsAsFactors = FALSE)
data <- as.data.frame(raw.data)
# Clean dataset by breaking down date in to year, month, and day
data$year <- substr(data$DATE, 1,4)
data$month <- substr(data$DATE, 6,7)
data$day <- substr(data$DATE, 9,10)
# Remove NA values
omitted.na.data <- na.omit(data)
# Export dataset as csv
write.csv(omitted.na.data, file = "data.csv")
View('data.csv')
